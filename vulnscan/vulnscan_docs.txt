    
    
    This is a script I developed to automate the retrieval of network information and
    then calculate the network address and CIDR range of the local network.  I have not 
    tested it extensively on subnetted networks but it should work on them aswell.
    It then calls a bash script 'vulnscan.sh' which performs an nmap scan.  The specifics 
    of that scan are described in that script. NOTE: of the below modules 'netaddr.py' and
    'bcolors.py' are local modules and need to be located in the same directory as 'vulnscan.py',
    netifaces is not in the default python modules and needs to be installed using
    'pip install netifaces'.  Additionally a directory named saved_nmap_scans will need
    to be created and 'vulnscan.sh' needs to be in the directory. Also the user must have 
    root privilage.


I. This section describes the steps or order of operations that they occur. The numbers are indicated in comment section for each block of code.
   The numbers indicated (#*) are in the netaddr.py module. The last three functions in netaddr.py are only called if the user chooses to input 
   an IP different from the default network address then (12*) 'check_IP()' function will be used. Then if the user chooses to enter a CIDR range
   the (13*) 'check_CIDR' will be used

	(1) (vulnscan.py) Get the network information using the 'netifaces' module.

	(2) (vulnscan.py) This section splits an IPv4 address on the '.' and places the octets in the 'broadcast/netmask_octets_list'. 
    	    It then calls the 'get_split_binary_list()' function, which converts a list of IPv4 octets to a list of binary 
    	    equivalents for the broadcast addr and the netmask.

	(3*) (netaddr.py) This function get_split_binary_function() converts the netmask and 
    	    broadcast addr to binary and splits them into a list of binary digits
 
	(4) (vulnscan.py) This section calls the 'adding()' function which takes the arguements from the 'get_split_binary_list()' function
    	    and creates the binary equivalent of the network address.
	
	(5*) (netaddr.py) This function anding() compares the two binary lists ANDING to get the network binary IPv4 address.

	(6) (vulnscan.py) This section uses the 'netmask_octets_list' and calls the 'cidr_calculator()'function to calculate the CIDR 
    	    range of the network address.

	(7*) (netaddr.py) This function cidr_calculator() takes the netmask and detemines the CIDR range.

	(8) (vulnscan.py) This section the list of binary digits, 'network_id_list', from the 'anding()' function and passes it into the
            'get_net_addr()' function.

	(9*) (netaddr.py) This section converts the list of binary digits, 'network_id_list' into standard IPv4 and appends the CIDR range.

	(10) (vulnscan.py) This section prints out the results.
	
	(11) This line asks the user if they want to use the network address generated from the above script asking for a 'y', 'n' or 'q' 
             and storing the value in the 'choice1' variable. This is the first point where there is any user interaction. My origional
             intention was to make this completely automatic. The only user input in the origional design was for them to enter user password
             and a name for a directory. The rest of the python is at the suggestion of my partner.  I have now added default inputs so that
             now the user other then entering their password need only to press [Enter] four times.             
             
        (12) This section takes the user input from 'choice1'. *(option 1) If 'choice1 == y' it takes the default 
	     values from the previous code and run 'vulscan.sh'. *(option 2) If 'choice1 == n' the user is prompted 
	     to enter an IPv4 address.  It then calls the 'n.check_IP() function passing the entered IP
	     and checks it for proper IPv4 format (NOTE: it does not mean that it is an actual IPv4 address it just 
	     means it fits within the XXX.XXX.XXX.XXX format where each group of X's can be 1-3 in lengthand be within
    	     the range of (0-255).  If IP is verified it breaks out of the loop. *(option3)) If 'choice1'== q' the program is exited.  
	     *(option4) none of the 'if/elif' statements are met, the user is reprompted for 'choice1' value and is 
	     returned to the beginning of the loop. 
	     
	******* AT THIS POINT I WILL BE BREAKING DOWN INTO THE OPTIONS******
	
	(option 1) User has chosen 'y' or 'Y' the .lower() method will allow an upper Y to pass. I tried trapping for a few other typos 
	     but found it caused some buggyness. It then calls the subprosses ./vulnscan.sh which I will explain later. It then calls
	     the exit() function from the sys module. I added this exit because for some reason the .sh script was looping back to the beginning, 
	     this seemed to solve the problem. I am going to explain option 2 last.
        
	(option 3) Simply quits the program. I put this option because i thought there would be times that i would want to use the program
	     to get the network information
	
	(invald input) Any input not matching 'y', 'n' or 'q' will get an error message, a reminder of valid input, and be prompted to reenter.
	
	(option 2) This option has an additional suboption. If user chooses 'n' they will then be prompted to enter an IPv4 address. The value
	     entered is then passed to the check_IP() function in netaddr.py to check that it is in proper IPv4 format, as i have said it does
	     not check for if it is a valid IP. If It is not a properly formatted IP address it returns the fail message and a flag of 0 which
	     causes the next if statement to print the fail message. The user is then prompted to input a new IP address. When a properly formatted 
	     ip address is entered it breaks out of the while loop into the next block of code. 
	     
        (13) This section first prompts the user if they want to enter a CIDR range for the scan 
	     prompting with a value of 'y' or 'n'.  *(option1) If 'choice2 == y' the user is prompted to enter a 
	     CIDR range 'CIDR_rng' and is given some instruction on what a CIDR should look like.  The users input is then
	     checked for proper format (NOTE: once again this does not verify that it is the appropriate range 
	     just that it falls within the allowed values for a CIDR).  If it is a valid CIDR the loop ends if not 
	     valid the user is reprompted to enter a new value.  *(option2) If 'choice2 == n' the loop ends. 
	     *(option3) Neither of the two options are met an the user is prompted to reenter the value for 'choice2' 
	     and returned to the begining of the loop.
	
	(14) NOTE: I am no longer using this section. I put this section in because the host discovery for some reason was 
    	     missing the gateway address, but I solved this by changing the host scan. I left it in incase I found a future use for it.
	     This section splits the IP adderess into individual octets as a dictionay as a key/value pair like {octet1: 192, octet2: 168, octet3: 0, octet4: 0} 
	     to be used in 'vulnscan.sh'.

	(15) This section checks for if the user chose to user a CIDR range if 'y' appends a '/' and 'verify_CIDR
	     to 'verify_IP' and stores it in 'net_addr'. If user chose not to enter a CIDR the value of 
	     verify_IP is stored in 'net_addr'.
	     
	(16) This line calls the 'vulnscan.sh' and passes the values of an IP address or network and the username.
	
	
II. The functions in netaddr.py are partially described in the above section and in comments within so I am not going to take the time to redescribe the here.


III. In this section I will be detailing the steps of the vulnscan.py script. 

	(1) 'IP' or $IP when used as a variable gets the network address and 'username' gets the non-root username from vulnscan.py.
		
	(2) This section variable will create a directory to store the output of the scans. It takes user input to name the 'directory' variable then gives the 'filename'
	    variable the same value as 'directory'.  It then appends the date/time to the value of the 'directory' to make sure the directory name is unique an to know when it was 
	    created. finally it creates a directory in 'saved_nmap_scans'.
	    
	(3) Select ports to be scanned or use defaults.  NOTE: Feel free to modify the default ports. I didn't bother to trap for inalid entries possibly in the future I might try
	    doing some error handling for 'ports' but that would be hard since there are so many possible combinations
	    
	(4) This section allows the user to set the Timing of the scan. It uses a while loop to trap for values out of range.
	
	(5) This is a host discovery scan. I found the -PU (UDP) switch got the best resuts for host discovery. The nmap_grep.txt file is overwritten each time the script is run.
	
	(6) This line filters out the 'Up' 'Hosts' and checks for unique values then saves them to 'up_hosts.txt' in the created 'directory'. This was a late addition I thought it
	    would be handy to have a quick reference of what devices where on the network at a given time. I would like to see if I could get a litte better device name discovery
	    at this time I am only getting about 1 out 3 host names.
	    
	(7) This line filters out the IPs in nmap_grep.txt and checks for unique values then puts them in the input_list.txt file. The input_list.txt file will be overwritten 
	    on each run of the script.
	    
	(8) This line does an indepth nmap scan doing service discovery(-sV), and runs the vulners script.  It also saves the results (-oG and -oN)to chosen filename in the created 
	    directory and an xml file scanfile.xml.
	    
	(9) The xsltproc process creates an .html version of scanfile.xml both of these files will be overwritten the next time the script is run.
	
	(10) The next two lines create empty files of the chosen filename with the .xml and .html extensions.
	
	(11) The next two lines copy the contents of scanfile.xml and scanfile.html to the files created above.
	
	(12) This line takes the script out of root user by using the value of $username passed from 'vulscan.py' then opens the scanfile.html in the default browser.
	
	(13) Prints to the screen the location of the output files.



